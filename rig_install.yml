- hosts: all
  vars:
    master_node_address: 192.168.31.148
  tasks:
    - name: add nvidia repo
      apt_repository:
        repo: 'ppa:graphics-drivers/ppa'
      become: true
    - name: fix locale
      locale_gen:
        name: en_US.UTF-8
        state: absent
      become: true
    - name: add locale
      shell: |
        echo 'LANG="en_US.UTF-8"
        LANGUAGE="en_US:en"' >> /etc/default/locale
      become: true
    - name: disable system logs
      shell: |
        systemctl disable rsyslog.service
      become: true
    - name: store vars
      shell: |
        echo "export DISPLAY=:0" >> ~/.bashrc && echo "export LC_ALL=C" >> ~/.bashrc && echo "export NO_AT_BRIDGE=1" >> ~/.bashrc
      become: true
    - name: "Update Cache"
      command: apt-get update
      become: true
    - name: Update and upgrade apt packages
      become: true
      apt:
        upgrade: dist
    - name: install packages
      apt: name={{item}} state=installed
      with_items:
        - software-properties-common
        - git
        - screen
        - cmake
        - libcrypto++-dev
        - libleveldb-dev
        - libjsoncpp-dev
        - libjsonrpccpp-dev
        - libboost-all-dev
        - libgmp-dev
        - libreadline-dev
        - libcurl4-gnutls-dev
        - ocl-icd-libopencl1
        - opencl-headers
        - mesa-common-dev
        - libmicrohttpd-dev
        - build-essential
        - supervisor
        - python3-pip
        - nginx
        - python-pip
      become: true
    - name: update grub
      shell: |
        update-grub
      become: true
    - name: make alias for python
      shell: |
        echo "alias python=python3.5" >> ~/.bashrc
    - name: make alias for pip
      shell: |
        echo "alias pip=pip3" >> ~/.bashrc
    - name: get rid of bus errors
      shell: |
        echo "export NO_AT_BRIDGE=1" >> ~/.bashrc
    - name: download drivers
      get_url:
        url: http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb
        dest: "{{ ansible_env.HOME }}"
    - name: retreive key
      apt_key:
        url: http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
        state: present
      become: true
    - name: install cuda drivers
      apt: deb="{{ ansible_env.HOME }}/cuda-repo-ubuntu1604_9.1.85-1_amd64.deb"
      become: true
    - name: install nvidia drivers
      apt: name=nvidia-390 state=present
      become: true
    - name: restart
      shell: sleep 2 && shutdown -r now
      async: 1
      poll: 0
      become: true
      ignore_errors: true
    - name: waiting for server to come back after reboot
      local_action: wait_for host={{ ansible_ssh_host }} state=started port={{ ansible_ssh_port }} delay=30 timeout=300 connect_timeout=15
    - name: stop X server
      systemd: state=stopped name=lightdm
      become: true
    - name: init nvidia config
      shell: |
        nvidia-xconfig -s -a --allow-empty-initial-configuration --cool-bits=12 --registry-dwords="PerfLevelSrc=0x2222" --no-sli --connected-monitor="DFP-0" -o /etc/X11/xorg.conf
      become: true
    - name: add overclock params
      shell: |
        sed -i '/Driver/a Option "Interactive" "False"' /etc/X11/xorg.conf && sed -i '/    Driver         "nvidia"/ a \ \ \ \ Option         "Coolbits" "28"' /etc/X11/xorg.conf
      become: true
    - name: restart
      shell: sleep 2 && shutdown -r now
      async: 1
      poll: 0
      become: true
      ignore_errors: true
    - name: waiting for server to come back after reboot
      local_action: wait_for host={{ ansible_ssh_host }} state=started port={{ ansible_ssh_port }} delay=30 timeout=300 connect_timeout=15
    - name: create overclock script
      template:
        src: overclock.sh.j2
        dest: "{{ ansible_env.HOME }}/overclock.sh"
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        mode: '0777'
    - name: register autostart overclock script
      template:
        src: autostart.j2
        dest: "{{ ansible_env.HOME }}/.config/upstart/overclock.conf"
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        mode: '0777'
    - name: restart
      shell: sleep 2 && shutdown -r now
      async: 1
      poll: 0
      become: true
      ignore_errors: true
    - name: waiting for server to come back after reboot
      local_action: wait_for host={{ ansible_ssh_host }} state=started port={{ ansible_ssh_port }} delay=30 timeout=300 connect_timeout=15
    - name: remove default nginx vhost
      file:
        state: absent
        path: /etc/nginx/sites-enabled/default
      become: true
    - name: create rig server host
      template:
        src: rig.conf.j2
        dest: /etc/nginx/sites-enabled/rig.conf
      become: true
    - name: restart nginx
      service: name=nginx state=restarted
      become: true
    - name: clone zecminer
      git:
        repo: 'https://github.com/paalomnikdev/zecminer.git'
        dest: "{{ ansible_env.HOME }}/zecminer"
    - name: clone claymore
      git:
        repo: 'https://github.com/paalomnikdev/claymore_dual_11.git'
        dest: "{{ ansible_env.HOME }}/claymore_dual_11"
    - name: create mining script
      template:
        src: start.sh.j2
        dest: "{{ ansible_env.HOME }}/zecminer/start.sh"
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        mode: '0777'
    - name: change ownership of www directory
      file:
        path: /var/www
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
      become: true
    - name: clone server agent code
      git:
        repo: 'https://github.com/paalomnikdev/client.git'
        dest: /var/www/client
    - name: setup client settings
      template:
        src: settings.py.j2
        dest: /var/www/client/settings.py
    - name: install virtualenv
      pip:
        name: virtualenv
      become: true
    - name: init virtualenv and install requirements
      pip:
        requirements: /var/www/client/requirements.txt
        virtualenv: /var/www/client/venv
        virtualenv_python: python3.5
    - name: create log dir
      file:
        path: /var/www/client/log
        owner: "{{ ansible_ssh_user }}"
        group: "{{ ansible_ssh_user }}"
        state: directory
    - name: create uwsgi.ini
      template:
        src: uwsgi.ini.j2
        dest: /var/www/client/uwsgi.ini
    - name: create supervisor config
      template:
        src: client.conf.j2
        dest: /etc/supervisor/conf.d/client.conf
      become: true
    - name: restart supervisor
      service: name=supervisor state=restarted
      become: true
